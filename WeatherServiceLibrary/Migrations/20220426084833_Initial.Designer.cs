// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherServiceLibrary.Database;

#nullable disable

namespace WeatherServiceLibrary.Migrations
{
    [DbContext(typeof(WeatherContext))]
    [Migration("20220426084833_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("WeatherServiceLibrary.Entities.Clouds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("All")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Clouds");
                });

            modelBuilder.Entity("WeatherServiceLibrary.Entities.Coord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Lat")
                        .HasColumnType("REAL");

                    b.Property<float>("Lon")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Coord");
                });

            modelBuilder.Entity("WeatherServiceLibrary.Entities.Main", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Feels_like")
                        .HasColumnType("REAL");

                    b.Property<int>("Humidity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Pressure")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Temp")
                        .HasColumnType("REAL");

                    b.Property<float>("Temp_max")
                        .HasColumnType("REAL");

                    b.Property<float>("Temp_min")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Main");
                });

            modelBuilder.Entity("WeatherServiceLibrary.Entities.Sys", b =>
                {
                    b.Property<int>("DataBaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sunrise")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sunset")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("DataBaseId");

                    b.ToTable("Sys");
                });

            modelBuilder.Entity("WeatherServiceLibrary.Entities.WeatherData", b =>
                {
                    b.Property<int>("IdWeatherData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CloudsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cod")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CoordId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Dt")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MainId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SysDataBaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Timezone")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Visibility")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Weather")
                        .HasColumnType("TEXT");

                    b.Property<int?>("WindId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("_base")
                        .HasColumnType("TEXT");

                    b.HasKey("IdWeatherData");

                    b.HasIndex("CloudsId");

                    b.HasIndex("CoordId");

                    b.HasIndex("MainId");

                    b.HasIndex("SysDataBaseId");

                    b.HasIndex("WindId");

                    b.ToTable("WeatherData");
                });

            modelBuilder.Entity("WeatherServiceLibrary.Entities.WeatherDataQuery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CityName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<int?>("WeatherDataIdWeatherData")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WeatherDataIdWeatherData");

                    b.ToTable("WeatherDataQuerys");
                });

            modelBuilder.Entity("WeatherServiceLibrary.Entities.Wind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Deg")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Speed")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Wind");
                });

            modelBuilder.Entity("WeatherServiceLibrary.Entities.WeatherData", b =>
                {
                    b.HasOne("WeatherServiceLibrary.Entities.Clouds", "Clouds")
                        .WithMany()
                        .HasForeignKey("CloudsId");

                    b.HasOne("WeatherServiceLibrary.Entities.Coord", "Coord")
                        .WithMany()
                        .HasForeignKey("CoordId");

                    b.HasOne("WeatherServiceLibrary.Entities.Main", "Main")
                        .WithMany()
                        .HasForeignKey("MainId");

                    b.HasOne("WeatherServiceLibrary.Entities.Sys", "Sys")
                        .WithMany()
                        .HasForeignKey("SysDataBaseId");

                    b.HasOne("WeatherServiceLibrary.Entities.Wind", "Wind")
                        .WithMany()
                        .HasForeignKey("WindId");

                    b.Navigation("Clouds");

                    b.Navigation("Coord");

                    b.Navigation("Main");

                    b.Navigation("Sys");

                    b.Navigation("Wind");
                });

            modelBuilder.Entity("WeatherServiceLibrary.Entities.WeatherDataQuery", b =>
                {
                    b.HasOne("WeatherServiceLibrary.Entities.WeatherData", "WeatherData")
                        .WithMany()
                        .HasForeignKey("WeatherDataIdWeatherData");

                    b.Navigation("WeatherData");
                });
#pragma warning restore 612, 618
        }
    }
}
